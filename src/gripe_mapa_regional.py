import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from gripe_data_processing import carregar_dados
import user_global

def create_dashboard():
    '''A fun√ß√£o create_dashboard cria um dashboard interativo no Streamlit para o monitoramento 
    epidemiol√≥gico de gripes no Brasil. Inclui visualiza√ß√µes de mapas e gr√°ficos para an√°lise de 
    casos estimados ao longo do tempo, al√©m de filtros para refinar os dados por ano, semana epidemiol√≥gica e munic√≠pio.
    '''
    st.title("ü¶†Monitoramento Epidemiol√≥gico de Gripes - Brasilü¶†")
    
    # Carregar os dados
    df_municipios, df_capitais = carregar_dados()

    # Filtro por ano epidemiol√≥gico
    anos = df_municipios['Ano epidemiol√≥gico'].unique()
    ano_selecionado = st.sidebar.selectbox('Selecione o Ano epidemiol√≥gico', anos)

    # Filtro por semana epidemiol√≥gica
    semanas = df_municipios['Semana epidemiol√≥gica'].unique()
    semana_inicial, semana_final = st.sidebar.select_slider(
        'Selecione o intervalo de semanas epidemiol√≥gicas',
        options=semanas,
        value=(min(semanas), max(semanas))
    )

    # Filtrar os dados com base nos filtros aplicados
    df_filtrado = df_municipios[
        (df_municipios['Ano epidemiol√≥gico'] == ano_selecionado) &
        (df_municipios['Semana epidemiol√≥gica'] >= semana_inicial) &
        (df_municipios['Semana epidemiol√≥gica'] <= semana_final)
    ]

    # Certifique-se de que as colunas "transmiss√£o comunit√°ria" e "Popula√ß√£o" est√£o no dataframe antes de criar o gr√°fico
    df_agrupado = df_filtrado.groupby('municipio').agg({
        'casos estimados': 'sum', 
        'latitude': 'first', 
        'longitude': 'first', 
        'transmiss√£o comunit√°ria': 'first',
        'm√©dia m√≥vel': 'mean',
        'Semana epidemiol√≥gica' : 'count'
    }).reset_index()

    # Soma dos casos estimados no per√≠odo filtrado para o estado
    soma_casos_estimados = df_agrupado['casos estimados'].sum()

    # Exibir a soma dos casos estimados
    st.write(f"Soma dos casos estimados no per√≠odo selecionado: {soma_casos_estimados:,.2f}")

    # Criando o gr√°fico de mapa
    fig = go.Figure(go.Scattermapbox(
        lat=df_agrupado['latitude'],
        lon=df_agrupado['longitude'],
        mode='markers',
        marker=go.scattermapbox.Marker(
            size=10,
            color=df_agrupado['casos estimados'],
            # Definindo uma escala de cores personalizada: verde -> amarelo -> laranja -> vermelho
            colorscale=[
                [0, "yellow"],    # Menos casos
                [0.25, "orange"],
                [0.5, "red"],
                [1, "purple"]       # Mais casos
            ],
            cmin=df_agrupado['casos estimados'].min(),  # Valor m√≠nimo de casos
            cmax=df_agrupado['casos estimados'].max(),  # Valor m√°ximo de casos
            showscale=True,
            sizemode='area',
        ),
        
        # Adicionar mais dados ao hover text (munic√≠pio, casos estimados, transmiss√£o comunit√°ria, popula√ß√£o)
        text=df_agrupado['municipio'] + 
            '<br>Casos estimados: ' + df_agrupado['casos estimados'].apply(lambda x: f"{x:,.2f}") +
            '<br>Transmiss√£o comunit√°ria: ' + df_agrupado['transmiss√£o comunit√°ria']
    ))

    # Definindo o layout do mapa
    fig.update_layout(
        mapbox_style="open-street-map",
        mapbox_zoom=5,
        mapbox_center={"lat": df_agrupado['latitude'].mean(), "lon": df_agrupado['longitude'].mean()},
        margin={"r":0,"t":0,"l":0,"b":0}
    )

    # Exibir o gr√°fico no Streamlit
    st.plotly_chart(fig)
    
    # Filtros adicionais para limitar os dados
    municipios = df_filtrado['municipio'].unique()
    municipio_selecionado = st.sidebar.selectbox('Selecione o Munic√≠pio', municipios)
    user_global.MUNICIPIO_USUARIO_GRIPE = municipio_selecionado
    # Filtrar os dados com base no munic√≠pio selecionado
    df_filtrado_municipio = df_filtrado[df_filtrado['municipio'] == municipio_selecionado]

    # Calcular a m√©dia m√≥vel apenas para o munic√≠pio selecionado
    df_filtrado_municipio['m√©dia m√≥vel'] = df_filtrado_municipio['casos estimados'].rolling(window=4).mean()

    # Agrupar os dados por 'Semana epidemiol√≥gica' para evitar m√∫ltiplas linhas
    df_agrupado = df_filtrado_municipio.groupby('Semana epidemiol√≥gica', as_index=False).agg({
        'casos estimados': 'mean',
        'm√©dia m√≥vel': 'mean'
    })

    # Gr√°fico de casos notificados apenas para o munic√≠pio selecionado
    fig_casos = px.line(
        df_agrupado,
        x='Semana epidemiol√≥gica', 
        y='casos estimados',
        labels={'casos estimados': 'Casos Notificados', 'Semana epidemiol√≥gica': 'Semana Epidemiol√≥gica'},
        title=f'Casos Notificados ao Longo das Semanas ({ano_selecionado}) - {municipio_selecionado}'
    )

    # Gr√°fico de m√©dia m√≥vel para o munic√≠pio selecionado
    fig_media_movel = px.line(
        df_agrupado, 
        x='Semana epidemiol√≥gica', 
        y='m√©dia m√≥vel',
        labels={'m√©dia m√≥vel': 'M√©dia M√≥vel', 'Semana epidemiol√≥gica': 'Semana Epidemiol√≥gica'},
        title=f'M√©dia M√≥vel ao Longo das Semanas ({ano_selecionado}) - {municipio_selecionado}'
    )

    # Layout para ambos os gr√°ficos
    fig_casos.update_layout(
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        font_color='white',
    )

    fig_media_movel.update_layout(
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        font_color='white',
    )
    
    # Exibir os gr√°ficos no Streamlit
    st.plotly_chart(fig_casos)
    st.plotly_chart(fig_media_movel)
    
    return 
